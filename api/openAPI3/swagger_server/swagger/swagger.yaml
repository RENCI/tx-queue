openapi: 3.0.0
info:
  title: 'RENCI Translational Science simple queue API: OpenAPI v3.0'
  description: txscience basic schedular
  termsOfService: http://cellfie.renci.org/TOS/
  contact:
    email: n4lewis@ucsd.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "2"
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://cellfie2.renci.org:8080/tx-queue/2
  description: SwaggerHub API Auto Mocking
tags:
- name: scheduler
  description: Where the scheduling happens
  externalDocs:
    description: Find out more
    url: http://cellfie.renci.org
paths:
  /scheduler/job:
    get:
      tags:
      - scheduler
      summary: Lists queued jobs
      description: Returns a map of status codes to job ids
      operationId: get_job_queue
      parameters: []
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
                x-content-type: application/json
              examples:
                jobExamples:
                  $ref: '#/components/examples/jobExamples'
      x-openapi-router-controller: swagger_server.controllers.scheduler_controller
    post:
      tags:
      - scheduler
      summary: Submit a job
      description: set up the run outside of the scheduler. The scheduler doesn't
        care what the set-up looks like as long as it's well-constructed JSON. For
        example, the run could be a serialized object with all the run parameters,
        or it could be a quoted unique id that the application-specific worker knows
        how to lookup.
      operationId: submit_job
      parameters:
        - name: job_timeout
          in: query
          required: false
          schema:
            type: integer
        - name: result_ttl
          in: query
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              examples:
                jobExampleFinished:
                  $ref: '#/components/examples/jobExampleFinished'
        400:
          description: Invalid Job
      x-openapi-router-controller: swagger_server.controllers.scheduler_controller
  /scheduler/job/{jobId}:
    get:
      tags:
      - scheduler
      summary: Find my job by Id
      description: For valid response try integer Ids with value >= 1 and <= 1000.\
        \ Other values will generated exceptions
      operationId: get_job_by_id
      parameters:
      - name: jobId
        in: path
        description: Id of job to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              examples:
                jobExampleFinished:
                  $ref: '#/components/examples/jobExampleFinished'
        400:
          description: Invalid Id supplied
        404:
          description: Job not found
      x-openapi-router-controller: swagger_server.controllers.scheduler_controller
    delete:
      tags:
      - scheduler
      summary: Delete my job by Id
      description: Upon success, marks job as 'aborted' if it must be suspended, and
        returns the deleted job with the appropriate status
      operationId: delete_job
      parameters:
      - name: jobId
        in: path
        description: Id of the job that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 3
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
              examples:
                jobExampleFull:
                  $ref: '#/components/examples/jobExampleError'
        400:
          description: Invalid Id supplied
        404:
          description: Job not found
      x-openapi-router-controller: swagger_server.controllers.scheduler_controller
components:
  schemas:
    Job:
      required:
      - id
      - payload
      - scheduledTimestamp
      - status
      - user
      type: object
      properties:
        id:
          type: integer
          description: The id for the job, unique within the job scheduler
          format: int64
        user:
          type: string
          description: This can reference the human user (e.g., email or username)
            or the client software (e.g., API key) that submitted the job.
        payload:
          type: string
          description: This string describes the run parameters to the application-specific
            worker that removes the job from the queue and processes it. As such,
            it can be a full payload of parameters describing the run, or a URL/DOI
            to an external resource that provides that information, or even a runID
            in the worker's database.
        scheduledTimestamp:
          type: string
          description: Time the job was submitted by the client
          format: date-time
        submitTimestamp:
          type: string
          description: Time the job began to run
          format: date-time
        endTimestamp:
          type: string
          description: Time the job finished running
          format: date-time
        systemRunTime:
          type: string
          description: Duration of the run
          format: iso8601
        status:
          type: string
          description: Job Status
          default: queued
          enum:
          - queued
          - initializing
          - running
          - finished
          - suspended
          - aborted
          - error
      example:
        scheduledTimestamp: 2000-01-23T04:56:07.000+00:00
        payload: payload
        submitTimestamp: 2000-01-23T04:56:07.000+00:00
        id: 0
        systemRunTime: systemRunTime
        user: user
        endTimestamp: 2000-01-23T04:56:07.000+00:00
        status: queued
  examples:
    jobExampleFinished:
      summary: an example of a finished job
      value:
        id: 1
        user: bradley@gmail.com
        payload: '{runid: 25516}'
        scheduledTimestamp: 2019-07-21T17:32:28Z
        submitTimestamp: 2019-07-21T17:33:28Z
        endTimestamp: 2019-07-21T17:34:28Z
        systemRunTime: PT1M
        status: finished
    jobExampleError:
      summary: an example of an error job
      value:
        id: 3
        user: tori@gmail.com
        payload: '{runid: 25516}'
        scheduledTimestamp: 2019-08-01T18:32:30Z
        submitTimestamp: 2019-08-02T10:35:30Z
        endTimestamp: 2019-08-02T11:55:40Z
        systemRunTime: PT1H20M10S
        status: error
    jobExamples:
      value:
      - id: 1
        user: bradley@gmail.com
        payload: doi 10.5555/55555
        scheduledTimestamp: 2019-07-21T17:32:28Z
        submitTimestamp: 2019-07-21T17:33:28Z
        endTimestamp: 2019-07-21T17:34:28Z
        systemRunTime: PT1M
        status: finished
      - id: 2
        user: bradley@gmail.com
        payload: doi 10.5555/55555
        scheduledTimestamp: 2019-08-01T18:32:29Z
        submitTimestamp: 2019-08-02T10:45:30Z
        endTimestamp: 2019-08-02T11:55:30Z
        systemRunTime: PT1H10M
        status: aborted
      - id: 3
        user: tori@gmail.com
        payload: '{runid: 25516}'
        scheduledTimestamp: 2019-08-01T18:32:30Z
        submitTimestamp: 2019-08-02T10:35:30Z
        endTimestamp: 2019-08-02T11:55:40Z
        systemRunTime: PT1H20M10S
        status: error
      - id: 4
        user: frank@gmail.com
        payload: '{runid: 25516}'
        scheduledTimestamp: 2019-08-01T18:32:31Z
        submitTimestamp: 2019-08-02T10:35:30Z
        endTimestamp: 2019-08-04T11:55:40Z
        systemRunTime: PT2D1H20M10S
        status: finished
      - id: 5
        user: joan@gmail.com
        payload: '{train: "http:/github.com/path/file1", seed:5, epochs: 5000}'
        scheduledTimestamp: 2019-08-01T18:32:32Z
        submitTimestamp: 2019-08-02T10:35:31Z
        endTimestamp: ""
        systemRunTime: ""
        status: running
      - id: 6
        user: joan@gmail.com
        payload: '{train: "http:/github.com/path/file2", seed:5, epochs: 5000}'
        scheduledTimestamp: 2019-08-01T18:32:33Z
        submitTimestamp: ""
        endTimestamp: ""
        systemRunTime: ""
        status: queued
      - id: 7
        user: joan@gmail.com
        payload: '{train: "http:/github.com/path/file2", seed:5, epochs: 5000}'
        scheduledTimestamp: 2019-08-01T18:32:34Z
        submitTimestamp: 2019-08-02T10:35:31Z
        endTimestamp: ""
        systemRunTime: ""
        status: initializing

