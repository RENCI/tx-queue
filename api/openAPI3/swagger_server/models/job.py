# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, user: str=None, payload: str=None, scheduled_timestamp: datetime=None, submit_timestamp: datetime=None, end_timestamp: datetime=None, system_run_time: str=None, status: str='queued'):  # noqa: E501
        """Job - a model defined in Swagger

        :param id: The id of this Job.  # noqa: E501
        :type id: int
        :param user: The user of this Job.  # noqa: E501
        :type user: str
        :param payload: The payload of this Job.  # noqa: E501
        :type payload: str
        :param scheduled_timestamp: The scheduled_timestamp of this Job.  # noqa: E501
        :type scheduled_timestamp: datetime
        :param submit_timestamp: The submit_timestamp of this Job.  # noqa: E501
        :type submit_timestamp: datetime
        :param end_timestamp: The end_timestamp of this Job.  # noqa: E501
        :type end_timestamp: datetime
        :param system_run_time: The system_run_time of this Job.  # noqa: E501
        :type system_run_time: str
        :param status: The status of this Job.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'id': int,
            'user': str,
            'payload': str,
            'scheduled_timestamp': datetime,
            'submit_timestamp': datetime,
            'end_timestamp': datetime,
            'system_run_time': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'user': 'user',
            'payload': 'payload',
            'scheduled_timestamp': 'scheduledTimestamp',
            'submit_timestamp': 'submitTimestamp',
            'end_timestamp': 'endTimestamp',
            'system_run_time': 'systemRunTime',
            'status': 'status'
        }
        self._id = id
        self._user = user
        self._payload = payload
        self._scheduled_timestamp = scheduled_timestamp
        self._submit_timestamp = submit_timestamp
        self._end_timestamp = end_timestamp
        self._system_run_time = system_run_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Job.

        The id for the job, unique within the job scheduler  # noqa: E501

        :return: The id of this Job.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Job.

        The id for the job, unique within the job scheduler  # noqa: E501

        :param id: The id of this Job.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user(self) -> str:
        """Gets the user of this Job.

        This can reference the human user (e.g., email or username) or the client software (e.g., API key) that submitted the job.  # noqa: E501

        :return: The user of this Job.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this Job.

        This can reference the human user (e.g., email or username) or the client software (e.g., API key) that submitted the job.  # noqa: E501

        :param user: The user of this Job.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def payload(self) -> str:
        """Gets the payload of this Job.

        This string describes the run parameters to the application-specific worker that removes the job from the queue and processes it. As such, it can be a full payload of parameters describing the run, or a URL/DOI to an external resource that provides that information, or even a runID in the worker's database.  # noqa: E501

        :return: The payload of this Job.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload: str):
        """Sets the payload of this Job.

        This string describes the run parameters to the application-specific worker that removes the job from the queue and processes it. As such, it can be a full payload of parameters describing the run, or a URL/DOI to an external resource that provides that information, or even a runID in the worker's database.  # noqa: E501

        :param payload: The payload of this Job.
        :type payload: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")  # noqa: E501

        self._payload = payload

    @property
    def scheduled_timestamp(self) -> datetime:
        """Gets the scheduled_timestamp of this Job.

        Time the job was submitted by the client  # noqa: E501

        :return: The scheduled_timestamp of this Job.
        :rtype: datetime
        """
        return self._scheduled_timestamp

    @scheduled_timestamp.setter
    def scheduled_timestamp(self, scheduled_timestamp: datetime):
        """Sets the scheduled_timestamp of this Job.

        Time the job was submitted by the client  # noqa: E501

        :param scheduled_timestamp: The scheduled_timestamp of this Job.
        :type scheduled_timestamp: datetime
        """
        if scheduled_timestamp is None:
            raise ValueError("Invalid value for `scheduled_timestamp`, must not be `None`")  # noqa: E501

        self._scheduled_timestamp = scheduled_timestamp

    @property
    def submit_timestamp(self) -> datetime:
        """Gets the submit_timestamp of this Job.

        Time the job began to run  # noqa: E501

        :return: The submit_timestamp of this Job.
        :rtype: datetime
        """
        return self._submit_timestamp

    @submit_timestamp.setter
    def submit_timestamp(self, submit_timestamp: datetime):
        """Sets the submit_timestamp of this Job.

        Time the job began to run  # noqa: E501

        :param submit_timestamp: The submit_timestamp of this Job.
        :type submit_timestamp: datetime
        """

        self._submit_timestamp = submit_timestamp

    @property
    def end_timestamp(self) -> datetime:
        """Gets the end_timestamp of this Job.

        Time the job finished running  # noqa: E501

        :return: The end_timestamp of this Job.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp: datetime):
        """Sets the end_timestamp of this Job.

        Time the job finished running  # noqa: E501

        :param end_timestamp: The end_timestamp of this Job.
        :type end_timestamp: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def system_run_time(self) -> str:
        """Gets the system_run_time of this Job.

        Duration of the run  # noqa: E501

        :return: The system_run_time of this Job.
        :rtype: str
        """
        return self._system_run_time

    @system_run_time.setter
    def system_run_time(self, system_run_time: str):
        """Sets the system_run_time of this Job.

        Duration of the run  # noqa: E501

        :param system_run_time: The system_run_time of this Job.
        :type system_run_time: str
        """

        self._system_run_time = system_run_time

    @property
    def status(self) -> str:
        """Gets the status of this Job.

        Job Status  # noqa: E501

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Job.

        Job Status  # noqa: E501

        :param status: The status of this Job.
        :type status: str
        """
        allowed_values = ["queued", "initializing", "running", "finished", "suspended", "aborted", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
