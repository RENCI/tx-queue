# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GlobalOptions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, threshold_type: str='percentile', threshold_value: str=None):  # noqa: E501
        """GlobalOptions - a model defined in Swagger

        :param id: The id of this GlobalOptions.  # noqa: E501
        :type id: int
        :param threshold_type: The threshold_type of this GlobalOptions.  # noqa: E501
        :type threshold_type: str
        :param threshold_value: The threshold_value of this GlobalOptions.  # noqa: E501
        :type threshold_value: str
        """
        self.swagger_types = {
            'id': int,
            'threshold_type': str,
            'threshold_value': str
        }

        self.attribute_map = {
            'id': 'id',
            'threshold_type': 'thresholdType',
            'threshold_value': 'thresholdValue'
        }

        self._id = id
        self._threshold_type = threshold_type
        self._threshold_value = threshold_value

    @classmethod
    def from_dict(cls, dikt) -> 'GlobalOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GlobalOptions of this GlobalOptions.  # noqa: E501
        :rtype: GlobalOptions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this GlobalOptions.


        :return: The id of this GlobalOptions.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this GlobalOptions.


        :param id: The id of this GlobalOptions.
        :type id: int
        """

        self._id = id

    @property
    def threshold_type(self) -> str:
        """Gets the threshold_type of this GlobalOptions.


        :return: The threshold_type of this GlobalOptions.
        :rtype: str
        """
        return self._threshold_type

    @threshold_type.setter
    def threshold_type(self, threshold_type: str):
        """Sets the threshold_type of this GlobalOptions.


        :param threshold_type: The threshold_type of this GlobalOptions.
        :type threshold_type: str
        """
        allowed_values = ["percentile", "absolute"]  # noqa: E501
        if threshold_type not in allowed_values:
            raise ValueError(
                "Invalid value for `threshold_type` ({0}), must be one of {1}"
                .format(threshold_type, allowed_values)
            )

        self._threshold_type = threshold_type

    @property
    def threshold_value(self) -> str:
        """Gets the threshold_value of this GlobalOptions.


        :return: The threshold_value of this GlobalOptions.
        :rtype: str
        """
        return self._threshold_value

    @threshold_value.setter
    def threshold_value(self, threshold_value: str):
        """Sets the threshold_value of this GlobalOptions.


        :param threshold_value: The threshold_value of this GlobalOptions.
        :type threshold_value: str
        """
        if threshold_value is None:
            raise ValueError("Invalid value for `threshold_value`, must not be `None`")  # noqa: E501

        self._threshold_value = threshold_value
