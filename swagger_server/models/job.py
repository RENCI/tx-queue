# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, user: str=None, run_id: int=None, scheduled_timestamp: datetime=None, submit_timestamp: datetime=None, system_run_time: datetime=None, end_timestamp: datetime=None, analysis_request: object=None, status: str='queued'):  # noqa: E501
        """Job - a model defined in Swagger

        :param id: The id of this Job.  # noqa: E501
        :type id: int
        :param user: The user of this Job.  # noqa: E501
        :type user: str
        :param run_id: The run_id of this Job.  # noqa: E501
        :type run_id: int
        :param scheduled_timestamp: The scheduled_timestamp of this Job.  # noqa: E501
        :type scheduled_timestamp: datetime
        :param submit_timestamp: The submit_timestamp of this Job.  # noqa: E501
        :type submit_timestamp: datetime
        :param system_run_time: The system_run_time of this Job.  # noqa: E501
        :type system_run_time: datetime
        :param end_timestamp: The end_timestamp of this Job.  # noqa: E501
        :type end_timestamp: datetime
        :param analysis_request: The analysis_request of this Job.  # noqa: E501
        :type analysis_request: object
        :param status: The status of this Job.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'id': int,
            'user': str,
            'run_id': int,
            'scheduled_timestamp': datetime,
            'submit_timestamp': datetime,
            'system_run_time': datetime,
            'end_timestamp': datetime,
            'analysis_request': object,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'user': 'user',
            'run_id': 'runId',
            'scheduled_timestamp': 'scheduledTimestamp',
            'submit_timestamp': 'submitTimestamp',
            'system_run_time': 'systemRunTime',
            'end_timestamp': 'endTimestamp',
            'analysis_request': 'analysisRequest',
            'status': 'status'
        }

        self._id = id
        self._user = user
        self._run_id = run_id
        self._scheduled_timestamp = scheduled_timestamp
        self._submit_timestamp = submit_timestamp
        self._system_run_time = system_run_time
        self._end_timestamp = end_timestamp
        self._analysis_request = analysis_request
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Job.


        :return: The id of this Job.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Job.


        :param id: The id of this Job.
        :type id: int
        """

        self._id = id

    @property
    def user(self) -> str:
        """Gets the user of this Job.


        :return: The user of this Job.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this Job.


        :param user: The user of this Job.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def run_id(self) -> int:
        """Gets the run_id of this Job.


        :return: The run_id of this Job.
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id: int):
        """Sets the run_id of this Job.


        :param run_id: The run_id of this Job.
        :type run_id: int
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def scheduled_timestamp(self) -> datetime:
        """Gets the scheduled_timestamp of this Job.


        :return: The scheduled_timestamp of this Job.
        :rtype: datetime
        """
        return self._scheduled_timestamp

    @scheduled_timestamp.setter
    def scheduled_timestamp(self, scheduled_timestamp: datetime):
        """Sets the scheduled_timestamp of this Job.


        :param scheduled_timestamp: The scheduled_timestamp of this Job.
        :type scheduled_timestamp: datetime
        """
        if scheduled_timestamp is None:
            raise ValueError("Invalid value for `scheduled_timestamp`, must not be `None`")  # noqa: E501

        self._scheduled_timestamp = scheduled_timestamp

    @property
    def submit_timestamp(self) -> datetime:
        """Gets the submit_timestamp of this Job.


        :return: The submit_timestamp of this Job.
        :rtype: datetime
        """
        return self._submit_timestamp

    @submit_timestamp.setter
    def submit_timestamp(self, submit_timestamp: datetime):
        """Sets the submit_timestamp of this Job.


        :param submit_timestamp: The submit_timestamp of this Job.
        :type submit_timestamp: datetime
        """

        self._submit_timestamp = submit_timestamp

    @property
    def system_run_time(self) -> datetime:
        """Gets the system_run_time of this Job.


        :return: The system_run_time of this Job.
        :rtype: datetime
        """
        return self._system_run_time

    @system_run_time.setter
    def system_run_time(self, system_run_time: datetime):
        """Sets the system_run_time of this Job.


        :param system_run_time: The system_run_time of this Job.
        :type system_run_time: datetime
        """

        self._system_run_time = system_run_time

    @property
    def end_timestamp(self) -> datetime:
        """Gets the end_timestamp of this Job.


        :return: The end_timestamp of this Job.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp: datetime):
        """Sets the end_timestamp of this Job.


        :param end_timestamp: The end_timestamp of this Job.
        :type end_timestamp: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def analysis_request(self) -> object:
        """Gets the analysis_request of this Job.


        :return: The analysis_request of this Job.
        :rtype: object
        """
        return self._analysis_request

    @analysis_request.setter
    def analysis_request(self, analysis_request: object):
        """Sets the analysis_request of this Job.


        :param analysis_request: The analysis_request of this Job.
        :type analysis_request: object
        """

        self._analysis_request = analysis_request

    @property
    def status(self) -> str:
        """Gets the status of this Job.

        Job Status  # noqa: E501

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Job.

        Job Status  # noqa: E501

        :param status: The status of this Job.
        :type status: str
        """
        allowed_values = ["uploading", "error", "running", "queued", "finished", "managingFiles", "settingParameters", "suspended", "aborted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
